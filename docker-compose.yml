services:
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb_app
    ports:
      - "${NC_PORT:-8080}:8080" 
    environment:
      NC_AUTH_JWT_SECRET: "${NC_AUTH_JWT_SECRET}"
      NC_PUBLIC_URL: "${NC_PUBLIC_URL}"
      NC_ADMIN_EMAIL: "${NC_ADMIN_EMAIL}"
      NC_ADMIN_PASSWORD: "${NC_ADMIN_PASSWORD}"
      NC_TOOL_DIR: "/usr/app/data/"

    volumes:
      - nocodb_data:/usr/app/data/

    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail ${NC_PUBLIC_URL}/api/v1/health || exit 1"]
      interval: 15s
      timeout: 10s 
      retries: 5
      start_period: 45s 
    networks:
      - nocodb_network
    restart: unless-stopped

  base1_pg_db:
    image: postgres:15 
    container_name: base1_pg_db
    environment:
      POSTGRES_DB: "${BASE1_PG_DB}" 
      POSTGRES_USER: "${BASE1_PG_USER}"
      POSTGRES_PASSWORD: "${BASE1_PG_PASSWORD}"
    volumes:
      - ./init_db:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data 
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${BASE1_PG_USER} -d ${BASE1_PG_DB} -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s 
    networks:
      - nocodb_network
    ports:
      - "${BASE1_PG_HOST_PORT}:5432" # Expose PostgreSQL port to host if needed for external tools
    restart: unless-stopped

  base1_auto_setup: 
    # Automatically creates the base and source in nocodb
    build: ./auto_setup 
    container_name: base1_auto_setup
    environment:
      NOCODB_BASE_URL: "http://nocodb_app:8080" # Use the service name and port
      NOCODB_EMAIL: "${NC_ADMIN_EMAIL}"
      NOCODB_PASSWORD: "${NC_ADMIN_PASSWORD}"
      
      POSTGRES_HOST: "${BASE1_PG_HOST:-base1_pg_db}"
      POSTGRES_PORT: "${BASE1_PG_HOST_PORT}" 
      POSTGRES_USER: "${BASE1_PG_USER}"
      POSTGRES_PASSWORD: "${BASE1_PG_PASSWORD}"
      POSTGRES_DB: "${BASE1_PG_DB}"

      BASE_TITLE: "${BASE_TITLE:-Base1}"
      SOURCE_TITLE: "${SOURCE_TITLE:-Base1 PG Source}"
      
    
    depends_on:
      nocodb: # Wait for nocodb to be healthy
        condition: service_healthy
      base1_pg_db: # Wait for postgres_db to be healthy
        condition: service_healthy
    networks:
      - nocodb_network
    # restart: on-failure


volumes:
  nocodb_data:
    driver: local
  postgres_data:
    driver: local

networks:
  nocodb_network:
    driver: bridge
